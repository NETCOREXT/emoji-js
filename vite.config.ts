import fs from 'node:fs/promises'
import path, { resolve } from 'node:path'
import readline from 'node:readline'
import { Readable } from 'node:stream'
import { fileURLToPath } from 'node:url'
import { globSync } from 'glob'
import { defineConfig } from 'vite'
import dts from 'vite-plugin-dts'

async function syncEmoji() {
  return {
    name: 'sync-emoji',
    async buildStart() {
      console.log('Fetching emoji data...')

      // https://www.unicode.org/Public/emoji/latest/emoji-test.txt
      const emojiUrl = 'https://www.unicode.org/Public/17.0.0/emoji/emoji-test.txt'
      const response = await fetch(emojiUrl)

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      const stream = Readable.fromWeb(response.body as any)
      const rl = readline.createInterface({
        input: stream,
        crlfDelay: Infinity,
      })

      let refVersion: string = ''
      let group: string = ''
      let subgroup: string = ''

      // 'fully-qualified' | 'unqualified' | 'minimally-qualified' | 'component'
      const lsEmoji: { code?: string[], emoji?: string, group?: string, subgroup?: string, version?: string, description?: string, status?: string }[] = []

      const regex = /^(?<code>[0-9A-Z ]+);\s(?<status>fully-qualified|unqualified|minimally-qualified|component)\s*#\s(?<emoji>.+)\sE(?<version>\d+\.\d+)\s(?<description>.+)$/gimu

      for await (const line of rl) {
        if (line.startsWith('# Version:')) {
          refVersion = line.replace('# Version: ', '').trim()
          continue
        }
        if (line.startsWith('# group:')) {
          group = line.replace('# group: ', '').trim()
          continue
        }

        if (line.startsWith('# subgroup:')) {
          subgroup = line.replace('# subgroup: ', '').trim()
          continue
        }

        const match = regex.exec(line)
        if (!match)
          continue

        const { code, status, emoji, version, description } = match.groups as Record<string, string>
        // console.log('Line:', line, '=>', { code, status, emoji, version, description, group, subgroup })
        lsEmoji.push({ code: code!.trim().split(' '), status, emoji, version, description, group, subgroup })
      }

      const template = `// This file is auto generated by @netcorext/emoji-js
// Reference: ${emojiUrl}
// Reference Version: ${refVersion}
export interface Emoji {
  code: string[]
  status: string
  emoji: string
  version: string
  description: string
  group: string
  subgroup: string
}
export const EMOJI: Emoji[] = ${JSON.stringify(lsEmoji).replaceAll('\'', '\\\'').replaceAll('"', '\'')}`

      const tsPath = resolve('./src/types/emoji.ts')
      await fs.writeFile(tsPath, template)
      console.log('âœ… emoji.ts has been updated.')
    },
  }
}

export default defineConfig({
  plugins: [
    dts({
      include: ['./src'],
    }),
  ],
  build: {
    lib: {
      entry: [path.resolve(__dirname, 'src/index.ts')],
    },
    rollupOptions: {
      plugins: [syncEmoji()],
      input: Object.fromEntries(
        globSync('src/**/*.ts').map(file => [
          path.relative(
            'src',
            file.slice(0, file.length - path.extname(file).length),
          ),
          fileURLToPath(new URL(file, import.meta.url)),
        ]),
      ),
      output: [
        {
          dir: 'dist',
          format: 'es',
          entryFileNames: '[name].mjs',
        },
        {
          dir: 'dist',
          format: 'cjs',
          entryFileNames: '[name].js',
        },
      ],
    },
    outDir: 'dist',
    emptyOutDir: true,
  },
})
